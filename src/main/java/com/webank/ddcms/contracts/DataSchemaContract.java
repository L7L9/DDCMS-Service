package com.webank.ddcms.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.StaticStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DataSchemaContract extends Contract {
  public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506040516200259e3803806200259e83398181016040528101906200003791906200012a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b60008060408385031215620001445762000143620000c0565b5b6000620001548582860162000113565b9250506020620001678582860162000113565b9150509250929050565b61241d80620001816000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632a39a9b41461005c57806339d75b771461008f5780637ea47755146100bf57806387061ac3146100db578063fd7f643d1461010c575b600080fd5b6100766004803603810190610071919061127b565b61013c565b604051610086949392919061135a565b60405180910390f35b6100a960048036038101906100a4919061139f565b61060d565b6040516100b6919061143f565b60405180910390f35b6100d960048036038101906100d491906115a0565b6106dd565b005b6100f560048036038101906100f0919061169d565b6109fc565b6040516101039291906116dd565b60405180910390f35b6101266004803603810190610121919061139f565b610f99565b604051610133919061176a565b60405180910390f35b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b815260040161019e91906117c6565b60a060405180830381865afa1580156101bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101df91906118fd565b9050600160038111156101f5576101f46112e3565b5b8160600151600381111561020c5761020b6112e3565b5b1461024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390611987565b60405180910390fd5b600260038111156102605761025f6112e3565b5b81604001516003811115610277576102766112e3565b5b146102b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae906119f3565b60405180910390fd5b6000801b8714156102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f490611a5f565b60405180910390fd5b600060026000898152602001908152602001600020905060006004811115610328576103276112e3565b5b8160030160009054906101000a900460ff16600481111561034c5761034b6112e3565b5b1461038c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038390611acb565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b81526004016103e891906117c6565b60a060405180830381865afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042991906118fd565b9050806020015196506000600660008b81526020019081526020016000209050600760008b8152602001908152602001600020600089815260200190815260200160002060009054906101000a900460ff16156104bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b290611b37565b60405180910390fd5b6000816002015490506000826003015490508a1561050757600183600001546104e49190611b86565b98508883600001819055508260010154975081891061050257600196505b610554565b600183600101546105189190611b86565b97508783600101819055508260000154985060026001846003015461053d9190611bdc565b6105479190611c3f565b88111561055357600296505b5b868560030160006101000a81548160ff0219169083600481111561057b5761057a6112e3565b5b02179055506001600760008e815260200190815260200160002060008c815260200190815260200160002060006101000a81548160ff0219169083151502179055507f29fefc3e7b6df316e91b9a4f9d2336b0c9ac71f4eede613e4286eb010537ea838c8b8d8c8c8c6040516105f696959493929190611c7f565b60405180910390a150505050505092959194509250565b6106156110eb565b600260008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610676576106756112e3565b5b6004811115610688576106876112e3565b5b8152505090506000801b816020015114156106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf90611d2c565b60405180910390fd5b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b815260040161073991906117c6565b60a060405180830381865afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a91906118fd565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a20e9df896040518263ffffffff1660e01b81526004016107d99190611d4c565b606060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190611df0565b9050600160048111156108305761082f6112e3565b5b81604001516004811115610847576108466112e3565b5b14610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90611e69565b60405180910390fd5b81602001518160200151146108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890611ed5565b60405180910390fd5b600160038111156108e5576108e46112e3565b5b826060015160038111156108fc576108fb6112e3565b5b1461093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390611f41565b60405180910390fd5b600086858560405160200161095393929190611fdb565b6040516020818303038152906040529050600081604051602001610977919061200c565b604051602081830303815290604052805190602001209050886004600083815260200190815260200160002054146109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109db9061206f565b60405180910390fd5b6109f089888888610fee565b50505050505050505050565b6000806000801b841415610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c906120db565b60405180910390fd5b6000801b831415610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8290612147565b60405180910390fd5b6000801b600460008681526020019081526020016000205414610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada906121b3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b8152600401610b3f91906117c6565b60a060405180830381865afa158015610b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8091906118fd565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a20e9df866040518263ffffffff1660e01b8152600401610bdf9190611d4c565b606060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611df0565b905060016004811115610c3657610c356112e3565b5b81604001516004811115610c4d57610c4c6112e3565b5b14610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8490611e69565b60405180910390fd5b8160200151816020015114610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90611ed5565b60405180910390fd5b60016003811115610ceb57610cea6112e3565b5b82606001516003811115610d0257610d016112e3565b5b14610d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3990611f41565b60405180910390fd5b600060056000878152602001908152602001600020549050610d6486826110b8565b945060405180608001604052808881526020018460200151815260200187815260200160006004811115610d9b57610d9a6112e3565b5b8152506002600087815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836004811115610dfa57610df96112e3565b5b02179055509050508460046000898152602001908152602001600020819055508080610e25906121d3565b91505080600560008881526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334b7dfab6002","6040518263ffffffff1660e01b8152600401610e9a9190612264565b602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb91906122ab565b9350604051806080016040528060008152602001600081526020016001600287610f059190611c3f565b610f0f9190611b86565b81526020018581525060066000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050507fc40138f2abc0799418ac7cc8ff6f08368f39a551d6caa1fa343b6c08aa25bb518588604051610f879291906122d8565b60405180910390a15050509250929050565b610fa161112e565b600660008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b604051806060016040528082815260200184815260200183815250600360008681526020019081526020016000206000820151816000019080519060200190611038929190611156565b506020820151816001019080519060200190611055929190611156565b506040820151816002019080519060200190611072929190611156565b50905050837fecb47283b4eb19ed782d835aa05fff90b4c60bee013b4014e594acded1cffb088285856040516110aa9392919061233a565b60405180910390a250505050565b600082826040516020016110cd9291906116dd565b60405160208183030381529060405280519060200120905092915050565b604051806080016040528060008019168152602001600080191681526020016000801916815260200160006004811115611128576111276112e3565b5b81525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b828054611162906123b5565b90600052602060002090601f01602090048101928261118457600085556111cb565b82601f1061119d57805160ff19168380011785556111cb565b828001600101855582156111cb579182015b828111156111ca5782518255916020019190600101906111af565b5b5090506111d891906111dc565b5090565b5b808211156111f55760008160009055506001016111dd565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112208161120d565b811461122b57600080fd5b50565b60008135905061123d81611217565b92915050565b60008115159050919050565b61125881611243565b811461126357600080fd5b50565b6000813590506112758161124f565b92915050565b6000806040838503121561129257611291611203565b5b60006112a08582860161122e565b92505060206112b185828601611266565b9150509250929050565b6112c48161120d565b82525050565b6000819050919050565b6112dd816112ca565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611323576113226112e3565b5b50565b600081905061133482611312565b919050565b600061134482611326565b9050919050565b61135481611339565b82525050565b600060808201905061136f60008301876112bb565b61137c60208301866112d4565b61138960408301856112d4565b611396606083018461134b565b95945050505050565b6000602082840312156113b5576113b4611203565b5b60006113c38482850161122e565b91505092915050565b6113d58161120d565b82525050565b6113e481611339565b82525050565b60808201600082015161140060008501826113cc565b50602082015161141360208501826113cc565b50604082015161142660408501826113cc565b50606082015161143960608501826113db565b50505050565b600060808201905061145460008301846113ea565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114ad82611464565b810181811067ffffffffffffffff821117156114cc576114cb611475565b5b80604052505050565b60006114df6111f9565b90506114eb82826114a4565b919050565b600067ffffffffffffffff82111561150b5761150a611475565b5b61151482611464565b9050602081019050919050565b82818337600083830152505050565b600061154361153e846114f0565b6114d5565b90508281526020810184848401111561155f5761155e61145f565b5b61156a848285611521565b509392505050565b600082601f8301126115875761158661145a565b5b8135611597848260208601611530565b91505092915050565b60008060008060008060c087890312156115bd576115bc611203565b5b60006115cb89828a0161122e565b96505060206115dc89828a0161122e565b955050604087013567ffffffffffffffff8111156115fd576115fc611208565b5b61160989828a01611572565b945050606087013567ffffffffffffffff81111561162a57611629611208565b5b61163689828a01611572565b935050608087013567ffffffffffffffff81111561165757611656611208565b5b61166389828a01611572565b92505060a087013567ffffffffffffffff81111561168457611683611208565b5b61169089828a01611572565b9150509295509295509295565b600080604083850312156116b4576116b3611203565b5b60006116c28582860161122e565b92505060206116d38582860161122e565b9150509250929050565b60006040820190506116f260008301856112bb565b6116ff60208301846112d4565b9392505050565b61170f816112ca565b82525050565b60808201600082015161172b6000850182611706565b50602082015161173e6020850182611706565b5060408201516117516040850182611706565b5060608201516117646060850182611706565b50505050565b600060808201905061177f6000830184611715565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117b082611785565b9050919050565b6117c0816117a5565b82525050565b60006020820190506117db60008301846117b7565b92915050565b600080fd5b6117ef816117a5565b81146117fa57600080fd5b50565b60008151905061180c816117e6565b92915050565b60008151905061182181611217565b92915050565b6004811061183457600080fd5b50565b60008151905061184681611827565b92915050565b6004811061185957600080fd5b50565b60008151905061186b8161184c565b92915050565b600060a08284031215611887576118866117e1565b5b61189160a06114d5565b905060006118a1848285016117fd565b60008301525060206118b584828501611812565b60208301525060406118c984828501611837565b60408301525060606118dd8482850161185c565b60608301525060806118f184828501611812565b60808301525092915050565b600060a0828403121561191357611912611203565b5b600061192184828501611871565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206163636f756e742073746174757300000000000000000000600082015250565b600061197160168361192a565b915061197c8261193b565b602082019050919050565b600060208201905081810360008301526119a081611964565b9050919050565b7f4163636f756e74206973206e6f74207769746e65737300000000000000000000600082015250565b60006119dd60168361192a565b91506119e8826119a7565b602082019050919050565b60006020820190508181036000830152611a0c816119d0565b9050919050565b7f496e76616c6964206461746120736368656d6120696400000000000000000000600082015250565b6000611a4960168361192a565b9150611a5482611a13565b602082019050919050565b60006020820190508181036000830152611a7881611a3c565b9050919050565b7f496e76616c6964206461746120736368656d6120737461747573000000000000600082015250565b6000611ab5601a8361192a565b9150611ac082611a7f565b602082019050919050565b60006020820190508181036000830152611ae481611aa8565b9050919050565b7f4475706c696361746520766f7465000000000000000000000000000000000000600082015250565b6000611b21600e8361192a565b9150611b2c82611aeb565b602082019050919050565b60006020820190508181036000830152611b5081611b14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b91826112ca565b9150611b9c836112ca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bd157611bd0611b57565b5b828201905092915050565b6000611be7826112ca565b9150611bf2836112ca565b925082821015611c0557611c04611b57565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c4a826112ca565b9150611c55836112ca565b925082611c6557611c64611c10565b5b828204905092915050565b611c7981611243565b82525050565b600060c082019050611c9460008301896112bb565b611ca160208301886112bb565b611cae6040830187611c70565b611cbb60608301866112d4565b611cc860808301856112d4565b611cd560a083018461134b565b979650505050505050565b7f6461746120736368656d61206e6f742065786973740000000000000000000000600082015250565b6000611d1660158361192a565b9150611d2182611ce0565b602082019050919050565b60006020820190508181036000830152611d4581611d09565b9050919050565b6000602082019050611d6160008301846112bb565b92915050565b60058110611d7457600080fd5b50565b600081519050611d8681611d67565b92915050565b600060608284031215611da257611da16117e1565b5b611dac60606114d5565b90506000611dbc84828501611812565b6000830152506020611dd084828501611812565b6020830152506040611de484828501611d77565b60408301525092915050565b600060608284031215611e0657611e05611203565b5b6000611e1484828501611d8c565b91505092915050565b7f70726f64756374206e6f7420617070726f766564000000000000000000000000600082015250565b6000611e5360148361192a565b9150611e5e82611e1d565b602082019050919050565b60006020820190508181036000830152611e828161","1e46565b9050919050565b7f6d7573742062652070726f64756374206f776e65720000000000000000000000600082015250565b6000611ebf60158361192a565b9150611eca82611e89565b602082019050919050565b60006020820190508181036000830152611eee81611eb2565b9050919050565b7f6f776e6572206e6f7420617070726f7665640000000000000000000000000000600082015250565b6000611f2b60128361192a565b9150611f3682611ef5565b602082019050919050565b60006020820190508181036000830152611f5a81611f1e565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611f95578082015181840152602081019050611f7a565b83811115611fa4576000848401525b50505050565b6000611fb582611f61565b611fbf8185611f6c565b9350611fcf818560208601611f77565b80840191505092915050565b6000611fe78286611faa565b9150611ff38285611faa565b9150611fff8284611faa565b9150819050949350505050565b60006120188284611faa565b915081905092915050565b7f64617461206973206e6f7420636f6e73697374656e7400000000000000000000600082015250565b600061205960168361192a565b915061206482612023565b602082019050919050565b600060208201905081810360008301526120888161204c565b9050919050565b7f496e76616c696420686173680000000000000000000000000000000000000000600082015250565b60006120c5600c8361192a565b91506120d08261208f565b602082019050919050565b600060208201905081810360008301526120f4816120b8565b9050919050565b7f496e76616c69642070726f647563744964000000000000000000000000000000600082015250565b600061213160118361192a565b915061213c826120fb565b602082019050919050565b6000602082019050818103600083015261216081612124565b9050919050565b7f6475706c6963617465206461746120736368656d612068617368000000000000600082015250565b600061219d601a8361192a565b91506121a882612167565b602082019050919050565b600060208201905081810360008301526121cc81612190565b9050919050565b60006121de826112ca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561221157612210611b57565b5b600182019050919050565b6004811061222d5761222c6112e3565b5b50565b600081905061223e8261221c565b919050565b600061224e82612230565b9050919050565b61225e81612243565b82525050565b60006020820190506122796000830184612255565b92915050565b612288816112ca565b811461229357600080fd5b50565b6000815190506122a58161227f565b92915050565b6000602082840312156122c1576122c0611203565b5b60006122cf84828501612296565b91505092915050565b60006040820190506122ed60008301856112bb565b6122fa60208301846112bb565b9392505050565b600061230c82611f61565b612316818561192a565b9350612326818560208601611f77565b61232f81611464565b840191505092915050565b600060608201905081810360008301526123548186612301565b905081810360208301526123688185612301565b9050818103604083015261237c8184612301565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123cd57607f821691505b602082108114156123e1576123e0612386565b5b5091905056fea2646970667358221220c59cc5994e01b9fa64c9fc4011531e1b30783686975f6ef0f10ceacb22b97da764736f6c634300080b0033"};

  public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

  public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506040516200259e3803806200259e83398181016040528101906200003791906200012a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b60008060408385031215620001445762000143620000c0565b5b6000620001548582860162000113565b9250506020620001678582860162000113565b9150509250929050565b61241d80620001816000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632a39a9b41461005c57806339d75b771461008f5780637ea47755146100bf57806387061ac3146100db578063fd7f643d1461010c575b600080fd5b6100766004803603810190610071919061127b565b61013c565b604051610086949392919061135a565b60405180910390f35b6100a960048036038101906100a4919061139f565b61060d565b6040516100b6919061143f565b60405180910390f35b6100d960048036038101906100d491906115a0565b6106dd565b005b6100f560048036038101906100f0919061169d565b6109fc565b6040516101039291906116dd565b60405180910390f35b6101266004803603810190610121919061139f565b610f99565b604051610133919061176a565b60405180910390f35b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b815260040161019e91906117c6565b60a060405180830381865afa1580156101bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101df91906118fd565b9050600160038111156101f5576101f46112e3565b5b8160600151600381111561020c5761020b6112e3565b5b1461024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390611987565b60405180910390fd5b600260038111156102605761025f6112e3565b5b81604001516003811115610277576102766112e3565b5b146102b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ae906119f3565b60405180910390fd5b6000801b8714156102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f490611a5f565b60405180910390fd5b600060026000898152602001908152602001600020905060006004811115610328576103276112e3565b5b8160030160009054906101000a900460ff16600481111561034c5761034b6112e3565b5b1461038c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038390611acb565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b81526004016103e891906117c6565b60a060405180830381865afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042991906118fd565b9050806020015196506000600660008b81526020019081526020016000209050600760008b8152602001908152602001600020600089815260200190815260200160002060009054906101000a900460ff16156104bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b290611b37565b60405180910390fd5b6000816002015490506000826003015490508a1561050757600183600001546104e49190611b86565b98508883600001819055508260010154975081891061050257600196505b610554565b600183600101546105189190611b86565b97508783600101819055508260000154985060026001846003015461053d9190611bdc565b6105479190611c3f565b88111561055357600296505b5b868560030160006101000a81548160ff0219169083600481111561057b5761057a6112e3565b5b02179055506001600760008e815260200190815260200160002060008c815260200190815260200160002060006101000a81548160ff0219169083151502179055507f29fefc3e7b6df316e91b9a4f9d2336b0c9ac71f4eede613e4286eb010537ea838c8b8d8c8c8c6040516105f696959493929190611c7f565b60405180910390a150505050505092959194509250565b6106156110eb565b600260008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610676576106756112e3565b5b6004811115610688576106876112e3565b5b8152505090506000801b816020015114156106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf90611d2c565b60405180910390fd5b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b815260040161073991906117c6565b60a060405180830381865afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a91906118fd565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a20e9df896040518263ffffffff1660e01b81526004016107d99190611d4c565b606060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190611df0565b9050600160048111156108305761082f6112e3565b5b81604001516004811115610847576108466112e3565b5b14610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90611e69565b60405180910390fd5b81602001518160200151146108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890611ed5565b60405180910390fd5b600160038111156108e5576108e46112e3565b5b826060015160038111156108fc576108fb6112e3565b5b1461093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390611f41565b60405180910390fd5b600086858560405160200161095393929190611fdb565b6040516020818303038152906040529050600081604051602001610977919061200c565b604051602081830303815290604052805190602001209050886004600083815260200190815260200160002054146109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109db9061206f565b60405180910390fd5b6109f089888888610fee565b50505050505050505050565b6000806000801b841415610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c906120db565b60405180910390fd5b6000801b831415610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8290612147565b60405180910390fd5b6000801b600460008681526020019081526020016000205414610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada906121b3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8e85fec336040518263ffffffff1660e01b8152600401610b3f91906117c6565b60a060405180830381865afa158015610b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8091906118fd565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a20e9df866040518263ffffffff1660e01b8152600401610bdf9190611d4c565b606060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611df0565b905060016004811115610c3657610c356112e3565b5b81604001516004811115610c4d57610c4c6112e3565b5b14610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8490611e69565b60405180910390fd5b8160200151816020015114610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90611ed5565b60405180910390fd5b60016003811115610ceb57610cea6112e3565b5b82606001516003811115610d0257610d016112e3565b5b14610d42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3990611f41565b60405180910390fd5b600060056000878152602001908152602001600020549050610d6486826110b8565b945060405180608001604052808881526020018460200151815260200187815260200160006004811115610d9b57610d9a6112e3565b5b8152506002600087815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690836004811115610dfa57610df96112e3565b5b02179055509050508460046000898152602001908152602001600020819055508080610e25906121d3565b91505080600560008881526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334b7dfab6002","6040518263ffffffff1660e01b8152600401610e9a9190612264565b602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb91906122ab565b9350604051806080016040528060008152602001600081526020016001600287610f059190611c3f565b610f0f9190611b86565b81526020018581525060066000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050507fc40138f2abc0799418ac7cc8ff6f08368f39a551d6caa1fa343b6c08aa25bb518588604051610f879291906122d8565b60405180910390a15050509250929050565b610fa161112e565b600660008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b604051806060016040528082815260200184815260200183815250600360008681526020019081526020016000206000820151816000019080519060200190611038929190611156565b506020820151816001019080519060200190611055929190611156565b506040820151816002019080519060200190611072929190611156565b50905050837fecb47283b4eb19ed782d835aa05fff90b4c60bee013b4014e594acded1cffb088285856040516110aa9392919061233a565b60405180910390a250505050565b600082826040516020016110cd9291906116dd565b60405160208183030381529060405280519060200120905092915050565b604051806080016040528060008019168152602001600080191681526020016000801916815260200160006004811115611128576111276112e3565b5b81525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b828054611162906123b5565b90600052602060002090601f01602090048101928261118457600085556111cb565b82601f1061119d57805160ff19168380011785556111cb565b828001600101855582156111cb579182015b828111156111ca5782518255916020019190600101906111af565b5b5090506111d891906111dc565b5090565b5b808211156111f55760008160009055506001016111dd565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112208161120d565b811461122b57600080fd5b50565b60008135905061123d81611217565b92915050565b60008115159050919050565b61125881611243565b811461126357600080fd5b50565b6000813590506112758161124f565b92915050565b6000806040838503121561129257611291611203565b5b60006112a08582860161122e565b92505060206112b185828601611266565b9150509250929050565b6112c48161120d565b82525050565b6000819050919050565b6112dd816112ca565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611323576113226112e3565b5b50565b600081905061133482611312565b919050565b600061134482611326565b9050919050565b61135481611339565b82525050565b600060808201905061136f60008301876112bb565b61137c60208301866112d4565b61138960408301856112d4565b611396606083018461134b565b95945050505050565b6000602082840312156113b5576113b4611203565b5b60006113c38482850161122e565b91505092915050565b6113d58161120d565b82525050565b6113e481611339565b82525050565b60808201600082015161140060008501826113cc565b50602082015161141360208501826113cc565b50604082015161142660408501826113cc565b50606082015161143960608501826113db565b50505050565b600060808201905061145460008301846113ea565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114ad82611464565b810181811067ffffffffffffffff821117156114cc576114cb611475565b5b80604052505050565b60006114df6111f9565b90506114eb82826114a4565b919050565b600067ffffffffffffffff82111561150b5761150a611475565b5b61151482611464565b9050602081019050919050565b82818337600083830152505050565b600061154361153e846114f0565b6114d5565b90508281526020810184848401111561155f5761155e61145f565b5b61156a848285611521565b509392505050565b600082601f8301126115875761158661145a565b5b8135611597848260208601611530565b91505092915050565b60008060008060008060c087890312156115bd576115bc611203565b5b60006115cb89828a0161122e565b96505060206115dc89828a0161122e565b955050604087013567ffffffffffffffff8111156115fd576115fc611208565b5b61160989828a01611572565b945050606087013567ffffffffffffffff81111561162a57611629611208565b5b61163689828a01611572565b935050608087013567ffffffffffffffff81111561165757611656611208565b5b61166389828a01611572565b92505060a087013567ffffffffffffffff81111561168457611683611208565b5b61169089828a01611572565b9150509295509295509295565b600080604083850312156116b4576116b3611203565b5b60006116c28582860161122e565b92505060206116d38582860161122e565b9150509250929050565b60006040820190506116f260008301856112bb565b6116ff60208301846112d4565b9392505050565b61170f816112ca565b82525050565b60808201600082015161172b6000850182611706565b50602082015161173e6020850182611706565b5060408201516117516040850182611706565b5060608201516117646060850182611706565b50505050565b600060808201905061177f6000830184611715565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117b082611785565b9050919050565b6117c0816117a5565b82525050565b60006020820190506117db60008301846117b7565b92915050565b600080fd5b6117ef816117a5565b81146117fa57600080fd5b50565b60008151905061180c816117e6565b92915050565b60008151905061182181611217565b92915050565b6004811061183457600080fd5b50565b60008151905061184681611827565b92915050565b6004811061185957600080fd5b50565b60008151905061186b8161184c565b92915050565b600060a08284031215611887576118866117e1565b5b61189160a06114d5565b905060006118a1848285016117fd565b60008301525060206118b584828501611812565b60208301525060406118c984828501611837565b60408301525060606118dd8482850161185c565b60608301525060806118f184828501611812565b60808301525092915050565b600060a0828403121561191357611912611203565b5b600061192184828501611871565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206163636f756e742073746174757300000000000000000000600082015250565b600061197160168361192a565b915061197c8261193b565b602082019050919050565b600060208201905081810360008301526119a081611964565b9050919050565b7f4163636f756e74206973206e6f74207769746e65737300000000000000000000600082015250565b60006119dd60168361192a565b91506119e8826119a7565b602082019050919050565b60006020820190508181036000830152611a0c816119d0565b9050919050565b7f496e76616c6964206461746120736368656d6120696400000000000000000000600082015250565b6000611a4960168361192a565b9150611a5482611a13565b602082019050919050565b60006020820190508181036000830152611a7881611a3c565b9050919050565b7f496e76616c6964206461746120736368656d6120737461747573000000000000600082015250565b6000611ab5601a8361192a565b9150611ac082611a7f565b602082019050919050565b60006020820190508181036000830152611ae481611aa8565b9050919050565b7f4475706c696361746520766f7465000000000000000000000000000000000000600082015250565b6000611b21600e8361192a565b9150611b2c82611aeb565b602082019050919050565b60006020820190508181036000830152611b5081611b14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b91826112ca565b9150611b9c836112ca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bd157611bd0611b57565b5b828201905092915050565b6000611be7826112ca565b9150611bf2836112ca565b925082821015611c0557611c04611b57565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c4a826112ca565b9150611c55836112ca565b925082611c6557611c64611c10565b5b828204905092915050565b611c7981611243565b82525050565b600060c082019050611c9460008301896112bb565b611ca160208301886112bb565b611cae6040830187611c70565b611cbb60608301866112d4565b611cc860808301856112d4565b611cd560a083018461134b565b979650505050505050565b7f6461746120736368656d61206e6f742065786973740000000000000000000000600082015250565b6000611d1660158361192a565b9150611d2182611ce0565b602082019050919050565b60006020820190508181036000830152611d4581611d09565b9050919050565b6000602082019050611d6160008301846112bb565b92915050565b60058110611d7457600080fd5b50565b600081519050611d8681611d67565b92915050565b600060608284031215611da257611da16117e1565b5b611dac60606114d5565b90506000611dbc84828501611812565b6000830152506020611dd084828501611812565b6020830152506040611de484828501611d77565b60408301525092915050565b600060608284031215611e0657611e05611203565b5b6000611e1484828501611d8c565b91505092915050565b7f70726f64756374206e6f7420617070726f766564000000000000000000000000600082015250565b6000611e5360148361192a565b9150611e5e82611e1d565b602082019050919050565b60006020820190508181036000830152611e828161","1e46565b9050919050565b7f6d7573742062652070726f64756374206f776e65720000000000000000000000600082015250565b6000611ebf60158361192a565b9150611eca82611e89565b602082019050919050565b60006020820190508181036000830152611eee81611eb2565b9050919050565b7f6f776e6572206e6f7420617070726f7665640000000000000000000000000000600082015250565b6000611f2b60128361192a565b9150611f3682611ef5565b602082019050919050565b60006020820190508181036000830152611f5a81611f1e565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611f95578082015181840152602081019050611f7a565b83811115611fa4576000848401525b50505050565b6000611fb582611f61565b611fbf8185611f6c565b9350611fcf818560208601611f77565b80840191505092915050565b6000611fe78286611faa565b9150611ff38285611faa565b9150611fff8284611faa565b9150819050949350505050565b60006120188284611faa565b915081905092915050565b7f64617461206973206e6f7420636f6e73697374656e7400000000000000000000600082015250565b600061205960168361192a565b915061206482612023565b602082019050919050565b600060208201905081810360008301526120888161204c565b9050919050565b7f496e76616c696420686173680000000000000000000000000000000000000000600082015250565b60006120c5600c8361192a565b91506120d08261208f565b602082019050919050565b600060208201905081810360008301526120f4816120b8565b9050919050565b7f496e76616c69642070726f647563744964000000000000000000000000000000600082015250565b600061213160118361192a565b915061213c826120fb565b602082019050919050565b6000602082019050818103600083015261216081612124565b9050919050565b7f6475706c6963617465206461746120736368656d612068617368000000000000600082015250565b600061219d601a8361192a565b91506121a882612167565b602082019050919050565b600060208201905081810360008301526121cc81612190565b9050919050565b60006121de826112ca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561221157612210611b57565b5b600182019050919050565b6004811061222d5761222c6112e3565b5b50565b600081905061223e8261221c565b919050565b600061224e82612230565b9050919050565b61225e81612243565b82525050565b60006020820190506122796000830184612255565b92915050565b612288816112ca565b811461229357600080fd5b50565b6000815190506122a58161227f565b92915050565b6000602082840312156122c1576122c0611203565b5b60006122cf84828501612296565b91505092915050565b60006040820190506122ed60008301856112bb565b6122fa60208301846112bb565b9392505050565b600061230c82611f61565b612316818561192a565b9350612326818560208601611f77565b61232f81611464565b840191505092915050565b600060608201905081810360008301526123548186612301565b905081810360208301526123688185612301565b9050818103604083015261237c8184612301565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123cd57607f821691505b602082108114156123e1576123e0612386565b5b5091905056fea2646970667358221220c59cc5994e01b9fa64c9fc4011531e1b30783686975f6ef0f10ceacb22b97da764736f6c634300080b0033"};

  public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

  public static final String[] ABI_ARRAY = {"[{\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"_accountContract\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_productContract\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"null(address,address)\"},{\"name\":\"CreateDataDetailEvent\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"dataSchemaName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"accessJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"contentJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"CreateDataDetailEvent(bytes32,string,string,string)\"},{\"name\":\"CreateDataSchemaEvent\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"CreateDataSchemaEvent(bytes32,bytes32)\"},{\"name\":\"VoteDataSchemaEvent\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"voterId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"agree\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"},{\"name\":\"agreeCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"denyCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"afterStatus\",\"type\":\"uint8\",\"internalType\":\"enum DataSchemaContract.DataSchemaStatus\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"VoteDataSchemaEvent(bytes32,bytes32,bool,uint256,uint256,uint8)\"},{\"name\":\"approveDataSchema\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"agree\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}],\"outputs\":[{\"name\":\"witnessDid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"agreeCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"denyCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"afterStatus\",\"type\":\"uint8\",\"internalType\":\"enum DataSchemaContract.DataSchemaStatus\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"selector\":[],\"methodSignatureAsString\":\"approveDataSchema(bytes32,bool)\"},{\"name\":\"createDataDetail\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"productBid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_accessJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_contentJson\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"dataSchemaName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[],\"selector\":[],\"methodSignatureAsString\":\"createDataDetail(bytes32,bytes32,string,string,string,string)\"},{\"name\":\"createDataSchema\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"conflictFields\":[],\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"witnessCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"selector\":[],\"methodSignatureAsString\":\"createDataSchema(bytes32,bytes32)\"},{\"name\":\"getDataSchema\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"dataSchema\",\"type\":\"tuple\",\"internalType\":\"struct DataSchemaContract.DataSchemaInfo\",\"indexed\":false,\"components\":[{\"name\":\"hash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"ownerId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enum DataSchemaContract.DataSchemaStatus\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"}],\"dynamic\":false,\"typeAsString\":\"(bytes32,bytes32,bytes32,uint8)\"}],\"selector\":[],\"methodSignatureAsString\":\"getDataSchema(bytes32)\"},{\"name\":\"getVoteInfo\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"conflictFields\":[],\"inputs\":[{\"name\":\"dataSchemaId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"struct DataSchemaContract.VoteInfo\",\"indexed\":false,\"components\":[{\"name\":\"agreeCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"denyCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"threshold\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"witnessCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"dynamic\":false,\"typeAsString\":\"(uint256,uint256,uint256,uint256)\"}],\"selector\":[],\"methodSignatureAsString\":\"getVoteInfo(bytes32)\"}]"};

  public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

  public static final String FUNC_APPROVEDATASCHEMA = "approveDataSchema";

  public static final String FUNC_CREATEDATADETAIL = "createDataDetail";

  public static final String FUNC_CREATEDATASCHEMA = "createDataSchema";

  public static final String FUNC_GETDATASCHEMA = "getDataSchema";

  public static final String FUNC_GETVOTEINFO = "getVoteInfo";

  public static final Event CREATEDATADETAILEVENT_EVENT = new Event("CreateDataDetailEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
  ;

  public static final Event CREATEDATASCHEMAEVENT_EVENT = new Event("CreateDataSchemaEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
  ;

  public static final Event VOTEDATASCHEMAEVENT_EVENT = new Event("VoteDataSchemaEvent",
          Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
  ;

  protected DataSchemaContract(String contractAddress, Client client, CryptoKeyPair credential) {
    super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
  }

  public static String getBinary(CryptoSuite cryptoSuite) {
    return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
  }

  public static String getABI() {
    return ABI;
  }

  public List<CreateDataDetailEventEventResponse> getCreateDataDetailEventEvents(
          TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATADETAILEVENT_EVENT, transactionReceipt);
    ArrayList<CreateDataDetailEventEventResponse> responses = new ArrayList<CreateDataDetailEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      CreateDataDetailEventEventResponse typedResponse = new CreateDataDetailEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.dataSchemaId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.dataSchemaName = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.accessJson = (String) eventValues.getNonIndexedValues().get(1).getValue();
      typedResponse.contentJson = (String) eventValues.getNonIndexedValues().get(2).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public List<CreateDataSchemaEventEventResponse> getCreateDataSchemaEventEvents(
          TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATASCHEMAEVENT_EVENT, transactionReceipt);
    ArrayList<CreateDataSchemaEventEventResponse> responses = new ArrayList<CreateDataSchemaEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      CreateDataSchemaEventEventResponse typedResponse = new CreateDataSchemaEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public List<VoteDataSchemaEventEventResponse> getVoteDataSchemaEventEvents(
          TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTEDATASCHEMAEVENT_EVENT, transactionReceipt);
    ArrayList<VoteDataSchemaEventEventResponse> responses = new ArrayList<VoteDataSchemaEventEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      VoteDataSchemaEventEventResponse typedResponse = new VoteDataSchemaEventEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.dataSchemaId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.voterId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      typedResponse.agree = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
      typedResponse.agreeCount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
      typedResponse.denyCount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
      typedResponse.afterStatus = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public TransactionReceipt approveDataSchema(byte[] dataSchemaId, Boolean agree) {
    final Function function = new Function(
            FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(agree)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return executeTransaction(function);
  }

  public String getSignedTransactionForApproveDataSchema(byte[] dataSchemaId, Boolean agree) {
    final Function function = new Function(
            FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(agree)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return createSignedTransaction(function);
  }

  public String approveDataSchema(byte[] dataSchemaId, Boolean agree,
                                  TransactionCallback callback) {
    final Function function = new Function(
            FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Bool(agree)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return asyncExecuteTransaction(function, callback);
  }

  public Tuple2<byte[], Boolean> getApproveDataSchemaInput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<byte[], Boolean>(

            (byte[]) results.get(0).getValue(),
            (Boolean) results.get(1).getValue()
    );
  }

  public Tuple4<byte[], BigInteger, BigInteger, BigInteger> getApproveDataSchemaOutput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_APPROVEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple4<byte[], BigInteger, BigInteger, BigInteger>(

            (byte[]) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue(),
            (BigInteger) results.get(2).getValue(),
            (BigInteger) results.get(3).getValue()
    );
  }

  public TransactionReceipt createDataDetail(byte[] productBid, byte[] dataSchemaId,
                                             String productId, String _accessJson, String _contentJson, String dataSchemaName) {
    final Function function = new Function(
            FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productBid),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(productId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_accessJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_contentJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return executeTransaction(function);
  }

  public String getSignedTransactionForCreateDataDetail(byte[] productBid, byte[] dataSchemaId,
                                                        String productId, String _accessJson, String _contentJson, String dataSchemaName) {
    final Function function = new Function(
            FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productBid),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(productId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_accessJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_contentJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return createSignedTransaction(function);
  }

  public String createDataDetail(byte[] productBid, byte[] dataSchemaId, String productId,
                                 String _accessJson, String _contentJson, String dataSchemaName,
                                 TransactionCallback callback) {
    final Function function = new Function(
            FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productBid),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(productId),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_accessJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_contentJson),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataSchemaName)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return asyncExecuteTransaction(function, callback);
  }

  public Tuple6<byte[], byte[], String, String, String, String> getCreateDataDetailInput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_CREATEDATADETAIL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple6<byte[], byte[], String, String, String, String>(

            (byte[]) results.get(0).getValue(),
            (byte[]) results.get(1).getValue(),
            (String) results.get(2).getValue(),
            (String) results.get(3).getValue(),
            (String) results.get(4).getValue(),
            (String) results.get(5).getValue()
    );
  }

  public TransactionReceipt createDataSchema(byte[] hash, byte[] productId) {
    final Function function = new Function(
            FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return executeTransaction(function);
  }

  public String getSignedTransactionForCreateDataSchema(byte[] hash, byte[] productId) {
    final Function function = new Function(
            FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return createSignedTransaction(function);
  }

  public String createDataSchema(byte[] hash, byte[] productId, TransactionCallback callback) {
    final Function function = new Function(
            FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),
                    new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId)),
            Collections.<TypeReference<?>>emptyList(), 0);
    return asyncExecuteTransaction(function, callback);
  }

  public Tuple2<byte[], byte[]> getCreateDataSchemaInput(TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getInput().substring(10);
    final Function function = new Function(FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<byte[], byte[]>(

            (byte[]) results.get(0).getValue(),
            (byte[]) results.get(1).getValue()
    );
  }

  public Tuple2<byte[], BigInteger> getCreateDataSchemaOutput(
          TransactionReceipt transactionReceipt) {
    String data = transactionReceipt.getOutput();
    final Function function = new Function(FUNC_CREATEDATASCHEMA,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
    return new Tuple2<byte[], BigInteger>(

            (byte[]) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue()
    );
  }

  public DataSchemaInfo getDataSchema(byte[] dataSchemaId) throws ContractException {
    final Function function = new Function(FUNC_GETDATASCHEMA,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DataSchemaInfo>() {}));
    return executeCallWithSingleValueReturn(function, DataSchemaInfo.class);
  }

  public VoteInfo getVoteInfo(byte[] dataSchemaId) throws ContractException {
    final Function function = new Function(FUNC_GETVOTEINFO,
            Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(dataSchemaId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<VoteInfo>() {}));
    return executeCallWithSingleValueReturn(function, VoteInfo.class);
  }

  public static DataSchemaContract load(String contractAddress, Client client,
                                        CryptoKeyPair credential) {
    return new DataSchemaContract(contractAddress, client, credential);
  }

  public static DataSchemaContract deploy(Client client, CryptoKeyPair credential,
                                          String _accountContract, String _productContract) throws ContractException {
    byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_accountContract),
            new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_productContract)));
    return deploy(DataSchemaContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
  }

  public static class DataSchemaInfo extends StaticStruct {
    public byte[] hash;

    public byte[] ownerId;

    public byte[] productId;

    public BigInteger status;

    public DataSchemaInfo(Bytes32 hash, Bytes32 ownerId, Bytes32 productId, Uint8 status) {
      super(hash,ownerId,productId,status);
      this.hash = hash.getValue();
      this.ownerId = ownerId.getValue();
      this.productId = productId.getValue();
      this.status = status.getValue();
    }

    public DataSchemaInfo(byte[] hash, byte[] ownerId, byte[] productId, BigInteger status) {
      super(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(hash),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(ownerId),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(productId),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8(status));
      this.hash = hash;
      this.ownerId = ownerId;
      this.productId = productId;
      this.status = status;
    }
  }

  public static class VoteInfo extends StaticStruct {
    public BigInteger agreeCount;

    public BigInteger denyCount;

    public BigInteger threshold;

    public BigInteger witnessCount;

    public VoteInfo(Uint256 agreeCount, Uint256 denyCount, Uint256 threshold,
                    Uint256 witnessCount) {
      super(agreeCount,denyCount,threshold,witnessCount);
      this.agreeCount = agreeCount.getValue();
      this.denyCount = denyCount.getValue();
      this.threshold = threshold.getValue();
      this.witnessCount = witnessCount.getValue();
    }

    public VoteInfo(BigInteger agreeCount, BigInteger denyCount, BigInteger threshold,
                    BigInteger witnessCount) {
      super(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(agreeCount),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(denyCount),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(threshold),new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(witnessCount));
      this.agreeCount = agreeCount;
      this.denyCount = denyCount;
      this.threshold = threshold;
      this.witnessCount = witnessCount;
    }
  }

  public static class CreateDataDetailEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] dataSchemaId;

    public String dataSchemaName;

    public String accessJson;

    public String contentJson;
  }

  public static class CreateDataSchemaEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] dataSchemaId;

    public byte[] hash;
  }

  public static class VoteDataSchemaEventEventResponse {
    public TransactionReceipt.Logs log;

    public byte[] dataSchemaId;

    public byte[] voterId;

    public Boolean agree;

    public BigInteger agreeCount;

    public BigInteger denyCount;

    public BigInteger afterStatus;
  }
}
